// ------------------
// definition entries
// ------------------
def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return '-' + stdout.toString().trim()
}

def getSprintRound = { ->
    if (project.hasProperty("SPRINT_ROUND")) {
        return project.property("SPRINT_ROUND")
    } else {
        return ''
    }
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

// check that the SEPTA.signing gradle property exists and that its value is the filename to a file
//  that has the extension of gradle
if (project.hasProperty("SEPTA.signing") && file(project.property("SEPTA.signing") + ".gradle").exists()) {
    apply from: project.property("SEPTA.signing") + ".gradle"
}

android {
    compileSdkVersion 25
    buildToolsVersion '26.0.2'
    defaultConfig {
        applicationId "org.septa.android.app"
        minSdkVersion 16
        targetSdkVersion 25
        versionCode 293
        versionName "2.0.293"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        manifestPlaceholders = [amazonawsApiKey: "${AMAZONAWS_API_KEY}", googleGeoApiKey: "${GOOGLE_GEO_API_KEY}", crashlyticsApiKey: "${CRASHLYTICS_API_KEY}"]
    }

    signingConfigs {
        prerelease {
            storeFile file("${SEPTA_DEVELOPMENT_KEYSTORE_FILE}")
            storePassword SEPTA_DEVELOPMENT_KEYSTORE_PASSWORD
            keyAlias 'prerelease'
            keyPassword PRERELEASE_KEYALIAS_PASSWORD
        }
        alpha {
            storeFile file("${SEPTA_DEVELOPMENT_KEYSTORE_FILE}")
            storePassword SEPTA_DEVELOPMENT_KEYSTORE_PASSWORD
            keyAlias 'alpha'
            keyPassword ALPHA_KEYALIAS_PASSWORD
        }
        beta {
            storeFile file("${SEPTA_DEVELOPMENT_KEYSTORE_FILE}")
            storePassword SEPTA_DEVELOPMENT_KEYSTORE_PASSWORD
            keyAlias 'beta'
            keyPassword BETA_KEYALIAS_PASSWORD
        }
        release {
            storeFile file("${SEPTA_DEVELOPMENT_KEYSTORE_FILE}")
            storePassword SEPTA_DEVELOPMENT_KEYSTORE_PASSWORD
            keyAlias 'prerelease'
            keyPassword PRERELEASE_KEYALIAS_PASSWORD
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            debuggable true
            zipAlignEnabled false
            signingConfig signingConfigs.prerelease
            versionNameSuffix "d" + "${getSprintRound}" + "${getGitHash}"
            buildConfigField "String", "VERSIONNAME", "\"${defaultConfig.versionName}-b${defaultConfig.versionCode}\""
        }
        alpha {
            minifyEnabled false
            debuggable false
            zipAlignEnabled true
            signingConfig signingConfigs.prerelease
            versionNameSuffix "a" + "${getSprintRound}" + "${getGitHash}"
            buildConfigField "String", "VERSIONNAME", "\"${defaultConfig.versionName}-b${defaultConfig.versionCode}\""
        }
        beta {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            debuggable false
            zipAlignEnabled true
            signingConfig signingConfigs.prerelease
            versionNameSuffix "b" + "${getSprintRound}" + "${getGitHash}"
            buildConfigField "String", "VERSIONNAME", "\"${defaultConfig.versionName}-b${defaultConfig.versionCode}\""
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            debuggable false
            zipAlignEnabled true
            signingConfig signingConfigs.prerelease
            buildConfigField "String", "VERSIONNAME", "\"${defaultConfig.versionName}\""
        }
    }
    productFlavors {
    }

}

repositories {
    mavenCentral()
    maven { url 'http://mvnrepository.com/artifact/' }
    google()
    maven { url 'https://maven.fabric.io/public' }
}

// buildscript
buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.0.0'
        classpath 'io.fabric.tools:gradle:1.+'

    }
}


apply plugin: 'com.android.application'

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support:design:25.3.1'
    compile 'com.android.support.constraint:constraint-layout:1.0.0'
    compile 'com.readystatesoftware.sqliteasset:sqliteassethelper:2.0.1'
    compile 'com.google.android.gms:play-services-maps:11.0.4'
    compile 'com.google.android.gms:play-services-location:11.0.4'
    compile 'com.google.android.gms:play-services-places:11.0.4'
    compile 'com.android.support:support-core-utils:25.3.1'
    compile 'com.squareup.retrofit2:retrofit:2.3.0'
    compile 'com.squareup.retrofit2:converter-gson:2.3.0'
    compile 'com.squareup.okhttp3:logging-interceptor:3.8.1'
    compile 'com.google.maps.android:android-maps-utils:0.5'
    compile 'com.android.support:support-v4:25.3.1'
    testCompile 'junit:junit:4.12'
    compile('com.crashlytics.sdk.android:crashlytics:2.8.0@aar') {
        transitive = true
    }
}